services:
  # PostgreSQL Database
  db:
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "5432:5432"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and task queues
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    restart: always
    volumes:
      - redis_data:/data

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    env_file:
      - ./.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    restart: always

  # Celery Worker for async tasks
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A core worker -l info
    volumes:
      - ./backend:/app
    env_file:
      - ./.env
    depends_on:
      - backend
      - redis
    restart: always

  # Celery Beat for scheduled tasks
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A core beat -l info
    volumes:
      - ./backend:/app
    env_file:
      - ./.env
    depends_on:
      - backend
      - redis
    restart: always

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    env_file:
      - ./.env
    restart: always
    depends_on:
      - backend

volumes:
  postgres_data:
  redis_data: